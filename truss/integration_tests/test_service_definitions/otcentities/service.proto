syntax = "proto3";

package TEST;
import "site.proto";
import "publisher.proto";
import "ad_network.proto";
import "advertiser.proto";
import "account_user_api_key.proto";
import "stats.proto";

// The Site service definition.
service OtcEntitiesService {
  // Find site by platform and package/store_app_id
  rpc SiteGetByAdvertiserPackage (SiteGetByAdvertiserPackageRequest) returns (SiteEntity) {}
  // Find site by id
  rpc SiteGetById(SiteGetByIdRequest) returns (SiteEntity) {}
  rpc SiteFind(SiteFindRequest) returns (SiteEntities) {}

  // Find publisher by advertiser_id and ad_network_id
  rpc PublisherGetByAdvertiserAdNetwork (PublisherGetByAdvertiserAdNetworkRequest) returns (PublisherEntity) {}  
  // Find publisher by id
  rpc PublisherGetById(PublisherGetByIdRequest) returns (PublisherEntity) {}
  rpc PublisherFind(PublisherFindRequest) returns (PublisherEntities) {}

  // Find ad network by id
  rpc AdNetworkGetById(AdNetworkGetByIdRequest) returns (AdNetworkEntity) {}  
  // Find ad network by name
  rpc AdNetworkGetByName(AdNetworkGetByNameRequest) returns (AdNetworkEntity) {} 
  rpc AdNetworkFind(AdNetworkFindRequest) returns (AdNetworkEntities) {} 

  // Find advertiser by id
  rpc AdvertiserGetById(AdvertiserGetByIdRequest) returns (AdvertiserEntity) {}  
  // Find advertiser by name
  rpc AdvertiserGetByName(AdvertiserGetByNameRequest) returns (AdvertiserEntity) {}   

  rpc AccountUserApiKeyGetById(AccountUserApiKeyGetByIdRequest) returns (AccountUserApiKeyEntity) {}
  rpc AccountUserApiKeyFind(AccountUserApiKeyFindRequest) returns (AccountUserApiKeyEntities) {}
  rpc AccountUserApiKeySave(AccountUserApiKeySaveRequest) returns (AccountUserApiKeyEntity) {}
  rpc AccountUserApiKeyAuthenticate(AccountUserApiKeyAuthenticateRequest) returns (AccountUserApiKeyAuthenticateResponse) {}
  
  rpc StatsByAdNetwork(StatsRequest) returns (StatsByAdNetworkResponse) {}
  rpc StatsBySite(StatsRequest) returns (StatsBySiteResponse) {}
  rpc StatsByPlatform(StatsRequest) returns (StatsByPlatformResponse) {}

  rpc Status(StatusRequest) returns (StatusResponse) {}
  rpc Ping(PingRequest) returns (PingResponse) {}
}

enum ServiceStatus {
  FAIL = 0;
  OK = 1;
}

message StatusRequest {
  bool full = 1;
}

message StatusResponse {
  ServiceStatus status = 1;
}

message PingRequest {}

message PingResponse {
  ServiceStatus status = 1;
}
