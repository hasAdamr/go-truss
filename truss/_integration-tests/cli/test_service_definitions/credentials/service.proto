syntax = "proto3";

package TEST;

import "google/api/annotations.proto";

import "partner_account.proto";

service CredentialsService {
  rpc PartnerAccountGetById(PartnerAccountGetByIdRequest) returns (PartnerAccountEntity) {
    option (google.api.http) = {
      get: "/PartnerAccountGetById"
    };
  }
  rpc PartnerAccountGetByRefId(PartnerAccountGetByRefIdRequest) returns (PartnerAccountEntity) {
    option (google.api.http) = {
      get: "/PartnerAccountGetByRefId"
    };
  }
  rpc PartnerAccountFindByClientPartner(PartnerAccountFindByClientPartnerRequest) returns (PartnerAccountEntities) {
    option (google.api.http) = {
      get: "/PartnerAccountFindByClientPartner"
    };
  }
  rpc PartnerAccountCreate(PartnerAccountCreateRequest) returns (PartnerAccountEntity) {
    option (google.api.http) = {
      get: "/PartnerAccountCreate"
    };
  }
  rpc PartnerAccountUpdate(PartnerAccountUpdateRequest) returns (PartnerAccountEntity) {
    option (google.api.http) = {
      get: "/PartnerAccountUpdate"
    };
  }
  rpc PartnerAccountDecode(PartnerAccountDecodeRequest) returns (PartnerAccountDecodeResponse) {
    option (google.api.http) = {
      get: "/PartnerAccountDecode"
    };
  }
  rpc PartnerAccountNewTemp(PartnerAccountNewTempRequest) returns (PartnerAccountNewTempResponse) {
    option (google.api.http) = {
      get: "/PartnerAccountNewTemp"
    };
  }
  rpc PartnerAccountLoadTemp(PartnerAccountLoadTempRequest) returns (PartnerAccountLoadTempResponse) {
    option (google.api.http) = {
      get: "/PartnerAccountLoadTemp"
    };
  }
  rpc Status(StatusRequest) returns (StatusResponse) {
    option (google.api.http) = {
      get: "/Status"
    };
  }
  rpc Ping(PingRequest) returns (PingResponse) {
    option (google.api.http) = {
      get: "/Ping"
    };
  }
}

enum ServiceStatus {
  FAIL = 0;
  OK = 1;
}

message StatusRequest {
  bool full = 1;
}

message StatusResponse {
  ServiceStatus status = 1;
}

message PingRequest {}

message PingResponse {
  ServiceStatus status = 1;
}
